function [Segment_All_Trials_Channels, X_Windows] = Generate_X_Windows(Data_Select_NOLABEL, Border, Window_Samples, Overlap_Samples, CHANNELS, Channels_X, X_Windows, Sampling_Frequency)
numChannels = length(CHANNELS);

Segment_All_Trials_Channels = struct(); % Define a new empty struct to store new matrices

% Segment_All_Trials_Channel = [];
var_name_set = {};
for iChannel = 2:numChannels
    var_name = ['Segment_All_Trials_' CHANNELS{iChannel}];
    var_name_set{end+1} = var_name;
    eval([var_name ' = [];']); % Generate empty array with channel name
    
    for i = 1:length(Border)
        if i < length(Border)
            Series_Trial_Channel = Data_Select_NOLABEL(Border(i):Border(i+1)-1, iChannel);
            Segment_Trial_Channel = buffer(Series_Trial_Channel, Window_Samples, Overlap_Samples, 'nodelay');
            
            % Delete the last column which is smaller than 1 window size
            % if size(Segment_Trial_Channel, 2) > 1 && any(Segment_Trial_Channel(:,end) == 0)
            Segment_Trial_Channel = Segment_Trial_Channel(:, 1:end-1);
            % end
            % The first and last column generated by 'buffer()' should be deleted
%             Segment_Trial_Channel = Segment_Trial_Channel(:, 2:end-1);

            Segment_Trial_Channel = transpose(Segment_Trial_Channel);
            eval([var_name ' = [ ' var_name ' ; Segment_Trial_Channel];']); % Assign value to the dynamically created variable
            %             Segment_All_Trials_Channel = [Segment_All_Trials_Channel; Segment_Trial_Channel];
        elseif i == length(Border)
            Series_Trial_Channel = [Data_Select_NOLABEL(Border(i):length(Data_Select_NOLABEL), iChannel)];
            Segment_Trial_Channel = buffer(Series_Trial_Channel, Window_Samples, Overlap_Samples, 'nodelay');
            
            % Delete the last column which is smaller than 1 window size
            % if size(Segment_Trial_Channel, 2) > 1 && any(Segment_Trial_Channel(:,end) == 0)
            Segment_Trial_Channel = Segment_Trial_Channel(:, 1:end-1);
            % end
            % The first and last column generated by 'buffer()' should be deleted
%             Segment_Trial_Channel = Segment_Trial_Channel(:, 2:end-1);
            
            Segment_Trial_Channel = transpose(Segment_Trial_Channel);
            eval([var_name ' = [ ' var_name ' ; Segment_Trial_Channel];']); % Assign value to the dynamically created variable
            %             Segment_All_Trials_Channel = [Segment_All_Trials_Channel; Segment_Trial_Channel];
        end
    end
    Segment_All_Trials_Channels.(var_name) = eval(var_name); % Store the new matrix in the struct
end

%%
for i = 1:numel(Channels_X)
    %     X_Windows.(Channels_X{i}) = vertcat(X_Windows.(Channels_X{i}), Segment_All_Trials_Channels.(var_name_set{i}), nan(1, Sampling_Frequency));
    X_Windows.(Channels_X{i}) = vertcat(X_Windows.(Channels_X{i}), Segment_All_Trials_Channels.(var_name_set{i}));
end
end